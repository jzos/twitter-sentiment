"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var requestPromise = require("request-promise");
var stream_1 = require("./stream");
var Instagram = (function () {
    function Instagram(config) {
        var apiVersion = config.apiVersion || 'v1';
        this.baseApiUrl = 'https://api.instagram.com';
        this.apiUrl = this.baseApiUrl + "/" + apiVersion + "/";
        this.config = {
            clientId: config.clientId,
            clientSecret: config.clientSecret,
            accessToken: config.accessToken,
        };
    }
    Instagram.prototype.get = function (endpoint, options, callback) {
        return this.request('GET', endpoint, options, callback);
    };
    Instagram.prototype.post = function (endpoint, options, callback) {
        return this.request('POST', endpoint, options, callback);
    };
    Instagram.prototype.delete = function (endpoint, options, callback) {
        return this.request('DELETE', endpoint, options, callback);
    };
    Instagram.prototype.stream = function (endpoint, options) {
        return new stream_1.default(this, endpoint, options);
    };
    Instagram.prototype.getAuthorizationUrl = function (redirectUri, options) {
        if (options === void 0) { options = {}; }
        var authorizationUrl = this.baseApiUrl + "/oauth/authorize/?client_id=" + this
            .config.clientId + "&redirect_uri=" + redirectUri + "&response_type=code";
        if (options.scope) {
            if (lodash_1.isArray(options.scope)) {
                options.scope = options.scope.join('+');
            }
            authorizationUrl += "&scope=" + options.scope;
        }
        if (options.state) {
            authorizationUrl += "&state=" + options.state;
        }
        return authorizationUrl;
    };
    Instagram.prototype.authorizeUser = function (code, redirectUri, callback) {
        return this.request('POST', 'oauth/access_token', {
            uriAbsolute: true,
            code: code,
            redirect_uri: redirectUri,
            client_id: this.config.clientId,
            client_secret: this.config.clientSecret,
            grant_type: 'authorization_code',
        });
    };
    Instagram.prototype.request = function (type, endpoint, options, callback) {
        if (options === void 0) { options = {}; }
        if (lodash_1.isFunction(options)) {
            callback = options;
            options = {};
        }
        var key = 'qs';
        var uri = "" + this.apiUrl + endpoint;
        options.access_token = this.config.accessToken;
        if (options.accessToken) {
            options.access_token = options.accessToken;
            delete options.accessToken;
        }
        if (options.uriAbsolute) {
            uri = this.baseApiUrl + "/" + endpoint;
            delete options.uriAbsolute;
        }
        if (type === 'POST') {
            key = 'form';
        }
        return requestPromise((_a = {
                method: type,
                uri: uri
            },
            _a[key] = __assign({}, options),
            _a.json = true,
            _a))
            .then(function (data) {
            if (lodash_1.isFunction(callback)) {
                callback(null, data);
            }
            return data;
        })
            .catch(function (err) {
            var error = err.error || err;
            if (lodash_1.isFunction(callback)) {
                return callback(error);
            }
            throw error;
        });
        var _a;
    };
    return Instagram;
}());
exports.default = Instagram;
//# sourceMappingURL=index.js.map